#!/usr/bin/env python3

import sys
import re
import os
import math



args = sys.argv
if len(args) == 1:
    print('Please Specify your Fasta filename\nUsage: ./script.py <path/to/raw_dna.txt>')
    sys.exit()

try:
    f = open(args[1], 'rt')
except:
    print('File Not Found!')
    sys.exit()



    ######################## Script ###########################

# Setting regex match patterns for reusability: 

#Set the sequence pattern we want to match in the following order:
	# (primer)((EXON)((intron)(EXON))*)(downstreamseq)
	# the compile function from the re module is just a nice aesthetic and to save time
seq_pattern = re.compile("^([agct]+)(([AGCT]+)(([agct]+)([AGCT]+))*)([agct]+)$")


#Defining a regex pattern to match exons and introns
exon_pattern = re.compile("([AGCT]+)")
intron_pattern = re.compile("([agct]+)")



def generateDNAStats(seq):
	"""
	@params: seq: A DNA Sequence from a Fasta File to analyze
	This function generates basic statistics from the DNA sequence.
	"""
	# Fir any raw sequence passed we must match the sequence pattern we predefined
	match_seq = seq_pattern.search(seq)
	#When we strip the adapter sequence and the downstream sequence, 
	# we are left with just exons and introns
	stripped_seq = match_seq.group(2)

	#The findall function helps us get all the matches for both patterns
	# it returns a list with all matches
	exon_match_list = exon_pattern.findall(stripped_seq)
	intron_match_list = intron_pattern.findall(stripped_seq)

	#The number of exons/introns is simply the length of the lists
	exon_count = len(exon_match_list)
	intron_count = len(intron_match_list)

	#We can now join the lists to get a single sequence string
	spliced_exons = "".join(exon_match_list)
	spliced_introns = "".join(intron_match_list)

	#Average exon/intron length calculation
	avg_exon_len = round(len(spliced_exons)/len(exon_match_list),1)
	avg_intron_len = round(len(spliced_introns)/len(intron_match_list),1)

	#Calculating base proportions
	exon_base_proportion = {}
	for base in set(spliced_exons):
		exon_base_proportion[base] = round(spliced_exons.count(base)/len(spliced_exons)*100, 2)

	intron_base_proportion = {}
	for base in set(spliced_introns.upper()):
		intron_base_proportion[base] = round(spliced_introns.upper().count(base)/len(spliced_introns)*100, 2)
	#Return the sequence statistics as a tuple

	seq_stats = (exon_count, intron_count, avg_exon_len, avg_intron_len, exon_base_proportion['A'], exon_base_proportion['C'], exon_base_proportion['G'], exon_base_proportion['T'],
	 			intron_base_proportion['A'], intron_base_proportion['C'], intron_base_proportion['G'], intron_base_proportion['T'])

	return seq_stats
   

def printStats():
	'''
	This method prints the sequence statistics to the user on the console
	'''
	stats_dict = {}
	for seqID, sequence in sequence_dict.items():
		stats_dict[seqID] = generateDNAStats(sequence)
	print('')
	print('%100s'%"################ Sequence Stats ################")
	print("%s%10s%10s%13s%15s%12s%12s%12s%12s%13s%13s%13s%13s"%('SeqID','#Exons','#Introns','AvgExonLen','AvgIntronLen','%A in Exon','%C in Exon','%G in Exon','%T in Exon','%A in Intron','%C in Intron','%G in Intron','%T in Intron'))
	for seqID, stats in stats_dict.items():
		print ('%-12s'%seqID, end='') 
		print ('%d %9d %14.2f %14.2f %11.2f %11.2f %11.2f %11.2f %11.2f %11.2f %11.2f %11.2f'%stats)

def writeStats():
	'''
	This function writes the statistics generated by the generateDNAStats function into a tab-delimited
	file DNAstats.txt
	'''
	#Create a statistics dictionary for ease of use 
	stats_dict = {}
	for seqID, sequence in sequence_dict.items():
		#For each sequence we have, we call the generateDNAStats method to get the statistics
		#The stats are then stored in the stats dictionary
		stats_dict[seqID] = generateDNAStats(sequence)


	# QUESTION 3:
	try:
		#Opening the destination file
		dest_file = open("DNAstats.txt", 'wt')
		#Writing the statistics to the destination file
		dest_file.write("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n"%('SeqID','#Exons','#Introns','AvgExonLen','AvgIntronLen','%A in Exon','%C in Exon','%G in Exon','%T in Exon','%A in Intron','%C in Intron','%G in Intron','%T in Intron'))
		for seqID, stats in stats_dict.items():
			dest_file.write('%s\t'%seqID)
			dest_file.write('%d\t%d\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n'%stats)
		#Inform the user that the stats have been written
		path = os.getcwd()+"/DNAstats.txt"
		print("\nStats Succesfully Written to: ", path)
		dest_file.close()
	except:
		print('Error with Destination File!')
		sys.exit()

	
printStats()
writeStats()	

## Current Timing:
#real	0m0.125s
#user	0m0.112s
#sys	0m0.013s

f.close()